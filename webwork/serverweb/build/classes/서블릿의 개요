<<서블릿의 개요>>
클라이언트의 요청을 처리하기 위한 기술
클라이언트가 요청하면 서버에서 실행되며 DB에 대한 처리등 서버의 리소스를 사용하여 만들어진 결과를 클라이언트에 응답한다.
서버에 의해서 호출되기 때문에 서버가 인식하는 위치에 저장되어 있어야 한다.
                       ----------------
                            표준화된 폴더 구조의 classes폴더(서블릿디렉토리)
개발자가 서블릿을 호출하는 명령문을 직접 정의하는 것이 아니라 서버에 의해서 호출되어야 하므로 정해진 규칙대로 서블릿클래스를 만들어야 한다.                               

<<서블릿작성방법>>
   1) 표준화된 폴더 구조안에 서블릿 클래스가 작성되어야 한다.
      => 서블릿이 저장되는 폴더 - classes 폴더
      => 이클립스에서는 자동으로 classes폴더로 copy된다.
      [표준화된 폴더구조]
      Context
         |
         |---- image파일, html,css , js,jsp파일
         | ____ WEB-INF폴더
                  |
                  |---- web.xml파일
                  |---- lib 폴더 - 라이브러리파일
                  |____ classes폴더 - 서블릿클래스, dao클래스, service클래스
                                     모든 자바클래스파일
                                     
     이클립스를 사용하는 경우
     C:\bigdata_iot\work\webwork\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\serverweb\WEB-INF\classes
        -------------------------
           workspace의 위치
           
  2) 서버에 의해서 호출되어야 하므로 반드시 public클래스로 작성해야 한다.
     => 어떤 패키지에 작성하더라도 서버가 찾아서 실행할 수 있어야 하므로 
  3) 서블릿클래스가 되기 위해서는 무조건 서블릿클래스를 상속받아야 한다.
     => 서블릿클래스에는 내부적으로 네트워크로 요청되는 데이터를 받아서 처리하거나 분석하는 등의 기능이 미리 작성되어 있다.
        J2EE라이브러리
     
        Servlet
          ^
          |
     GenericServlet   -------------- 일반적인 내용을 담고 있는 서블릿
          ^
          |
     HttpServlet      -------------- http프로토콜에 특화된 서블릿
          ^
          |
      MyServlet       -------------- 내가만드는 서블릿
      
                 
  
  4) 서버가 호출할 메소드(callback메소드)를 오버라이딩
     - 서버가 클라이언트의 요청을 분석해서 실행해야 하는 서블릿을 서블릿 디렉토리에서 찾는다.
     - 서블릿의 적절한 시점에 호출되는 메소드를 실행한다.
     - 서버가 서블릿객체를 생성하고 관리한다.(lifecycle을 관리)
     
     [오버라이딩할 메소드]
     - init : 서블릿객체가 초기화될때 호출되는 메소드
     - destroy : 서블릿객체가 소멸될때 호출되는 메소드
                 WAS가 restart될때
                 서블릿이 컴파일될때
                 Context가 reload
     - service : 클라이언트가 요청할때 호출되는 메소드
                 클라이언트의 요청을 처리하는 메소드로 요청을 받고 처리할 내용을 구현
                 (ex - 로그인, 게시판등록, 회원가입, 목록보기, 메일읽기, 인증......)
                 요청방식의 구분이 없이 모든 방식으로 요청하는 것을 처리할 수 있다.
                 -------
                    get방식, post방식
     - doGet : 클라이언트가 get방식으로 요청할때 호출되는 메소드
     - doPost : 클라이언트가 post방식으로 요청할때 호출되는 메소드

  5) 서버가 서블릿을 찾을 수 있도록 등록(설정파일에 등록 - web.xml)
     => 서버가 요청을 분석해서 실행할 서블릿을 서블릿 디렉토리에서 찾아서 실행한다. 서버가 요청을 확인하고 어떤 서블릿클래스를 실행해야 하는지
        알 수 있도록 설정파일에 등록해야 한다.
        이런 정보를 web.xml에 등록한다.(지금은 모두 annotation으로 표현)
        web.xml파일은 xml형식의 파일이므로 태그로 작성해야 한다.
     => web.xml에 변화가 있으면 저장하고 서버를 restart해야한다.
        
        ① 서블릿클래스를 등록 - 무엇????
          <servlet>
  			<servlet-name>서블릿명(alias)</servlet-name>
  			<servlet-class>실제실행될서블릿클래스명(패키지까지포함)</servlet-class>
  	      </servlet>
     
          ex) basic패키지에 있는 FirstServlet을 first라는 이름으로 정의
       	  <servlet>
  	           <servlet-name>first</servlet-name>
  	           <servlet-class>basic.FirstServlet</servlet-class>
          </servlet>
          
        ② 서블릿매핑(등록된 서블릿을 어떻게 요청할 것인지 등록 - 어떤 url로 요청할 것인지 ) - 어떻게?
          => 반드시 <servlet>엘리먼트 다음에 위치해야 한다. 
                           -------
                             html의 태그와 동일한개념
          => <servlet>와   <servlet-mapping>은 한쌍으로 작성해야 한다.                  
          <servlet-mapping>
  			<servlet-name>위에서정의한 서블릿명</servlet-name>
  			<url-pattern>요청할 서블릿의 url</url-pattern>
  			            -------------------
  		  </servlet-mapping>     |
  		                         |___ 반드시 /나 .으로 시작해야 한다.
        
        
          ex) first라는 이름으로 정의된 서블릿을 /first.sds로 요청했을때 실행되도록 등록
          <servlet-mapping>
  				<servlet-name>first</servlet-name>
  		        <url-pattern>/first.sds</url-pattern>
          </servlet-mapping>
      
      ========> 서블릿 spec 3.0이상 부터 web.xml에 서블릿의 정보를 정의하지 않고 어노테이션을 통해 서블릿 정보를 명시
      @WebServlet(name = "second", urlPatterns = { "/second.do" })
      ------------ --------------   ----------------------------------
        web.xml에 등록하는 것과 동일 |                               |
                                |___ 서블릿명 <servlet>등록        |_____ <url-pattern>에 명시하는 서블릿 path  
      : 미리 정의되어 있는 어노테이션을 사용해서 컴파일러가 
        클래스를 만들 수 있도록 정의
        web.xml에 등록하는 것과 동일한 작업이므로 어노테이션이 추가되어도 서버를 restart해야 한다.
        web.xml과 어노테이션 모두에서 name,urlPatterns 즉, 서블릿명과 urlpattern은 중복되지 않도록 작업한다.
                           
<<서블릿요청방법>>
   1. get방식으로 요청하기
      1) 주소표시줄에 입력해서 요청하는 방법
         => 주로 테스트용으로 사용(주소표시줄에 입력해서 서블릿을 요청하는 경우는 첫 번째 페이지를 요청하며 서블릿을 실행해야 하는 경우)
         ex)
         http://서버ip:port/context명/서블릿매핑명
                                    ----------
                                        |__<url-pattern>에 등록한 요청 path
                                        
         http://192.168.0.221:8088/serverweb/first.sds     
        ------  ------------- ---- --------- ----------
        프로토콜  WAS(서버)의 ip  port  context명   매핑명(요청path)                
     
      2) 하이퍼링크로 요청하기
         => 텍스트나 이미지를 클릭해서 서블릿을 요청
         <a href="http://192.168.0.221:8088/serverweb/first.sds">서블릿요청</a> 
         <a href="/context명/매핑명">서블릿요청</a>
         <a href="/serverweb/first.sds">서블릿요청</a>  
         
      3) <form>태그의 method속성을 get으로 정의하고 submit 버튼을 눌러서 요청하는 경우
         <form method="요청방식" action="요청할 server의 web application path">
         	<input type="text" name="id"/>
         	<input type="password" name="pass"/>
         	
         </form>   
         <form method="get" action="/serverweb/first.sds">
			아이디:<input type="text" name="id"/>
			패스워드:<input type="password" name="pass"/>
			<input type="submit" value="서블릿요청">
		</form>
        => submit 버튼을 누러면  "/serverweb/first.sds"를 요청되어 실행되며 <form></form>사이의 모든 양식 태그의 name과 value가               
           first.sds로 등록된 서블릿에게 get방식으로 전송된다.
                             
   2. post방식으로 요청하기
 	  1) <form>태그의 method속성을 post으로 정의하고 submit 버튼을 눌러서 요청하는 경우
         <form method="요청방식" action="요청할 server의 web application path">
         	<input type="text" name="id"/>
         	<input type="password" name="pass"/>
         	
         </form>   
         <form method="post" action="/serverweb/first.sds">
			아이디:<input type="text" name="id"/>
			패스워드:<input type="password" name="pass"/>
			<input type="submit" value="서블릿요청">
		</form>
        => submit 버튼을 누러면  "/serverweb/first.sds"를 요청되어 실행되며 <form></form>사이의 모든 양식 태그의 name과 value가               
           first.sds로 등록된 서블릿에게 post방식으로 전송된다.

   3. 요청방식
      1) get방식
         => 사용자가 양식태그를 통해 입력한 모든 내용이 요청 header에 추가되어 서버로 전송되는 방식
         => 사용자가 입력한 모든 내용이 그대로 노출되므로 보안에 적합하지 않다.
         => 서버에 저장된 데이터를 가져오는 경우 사용되는 방식
         => 클라이언트가 입력한 내용을 제한적으로 전송
                           ---------------
                               최대 256글자만 전송이 가능
     2) post방식
        => 사용자가 입력한 데이터가 요청메시지 body에 추가되어 서버로 전송되는 방식
        => 사용자가 입력한 모든 내용이 요청메시지 body에 추가되므로 노출되지 않는다.
                                                  -------------------
                                                     wireshark같은 패킷캡쳐툴을 이용하면 노출되므로 중요한 데이터는 암호화해서 전송                                
        => 클라이언트가 입력하는 모든 내용의 데이터를 전송할 수 있다.
        => 파일업로드는 무조건 post방식으로 처리해야 한다.
        => 서버에 저장된 리소스를 업데이트하는 경우 post방식으로 처리










