/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2021-11-12 06:22:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import multi.erp.board.BoardVO;
import java.util.ArrayList;

public final class boardlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("multi.erp.board.BoardVO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Bootstrap Example</title>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\">\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	//자바스크립트에서 컨트롤러에서 공유한 데이터를 꺼내기\r\n");
      out.write("	category = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${category}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" ;//EL표기법으로 공유한 데이터를 꺼내기\r\n");
      out.write("	//alert(category);\r\n");
      out.write("	//category설정하기\r\n");
      out.write("	$(document).ready(function(){\r\n");
      out.write("		$(\"#category\").val(category).attr(\"selected\",\"selected\")\r\n");
      out.write("		//<select>에서 선택이 바뀔때마다 change이벤트발생 -> change이벤트가 발생하면 /board/list/do를 호출하면서 category파라미터를 넘김\r\n");
      out.write("		$(\"#category\").change(function(){\r\n");
      out.write("			location.href=\"/bigdataERP/board/list.do?category=\"\r\n");
      out.write("														+encodeURI($(this).val())\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
 ArrayList<BoardVO> boardlist = (ArrayList<BoardVO>) request.getAttribute("boardlist"); 
	   int size = boardlist.size();
	
      out.write("\r\n");
      out.write("	<h3>JSTL게시판</h3>\r\n");
      out.write("	<div style=\"padding-top: 30px\">\r\n");
      out.write("		<div class=\"col-md-3\" style=\"padding-bottom: 10px\">\r\n");
      out.write("		    구분:\r\n");
      out.write("			<form >\r\n");
      out.write("				<select name=\"category\"  id=\"category\">\r\n");
      out.write("					<option value=\"all\">전체게시물</option>\r\n");
      out.write("					<option value=\"경조사\" >경조사</option>\r\n");
      out.write("					<option value=\"사내소식\" >사내소식</option>\r\n");
      out.write("					<option value=\"게시판\">게시판</option>\r\n");
      out.write("				</select>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("		<table class=\"table\">\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>번호</th>\r\n");
      out.write("					<th>제목</th>\r\n");
      out.write("					<th>작성자</th>\r\n");
      out.write("					<th>등록일</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tbody>\r\n");
      out.write("			");
for(int i=0;i<size;i++){
					BoardVO board = boardlist.get(i);
				
      out.write("\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>");
      out.print( board.getBoard_no() );
      out.write("</td>\r\n");
      out.write("						<td><a href=\"/bigdataERP/board/read.do?board_no=");
      out.print( board.getBoard_no());
      out.write("&state=READ\">");
      out.print( board.getTitle() );
      out.write("</a></td>\r\n");
      out.write("						<td>");
      out.print( board.getId() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print( board.getWrite_date() );
      out.write("</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				");
} 
      out.write("\r\n");
      out.write("					\r\n");
      out.write("			\r\n");
      out.write("			</tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("	<form action=\"/bigdataERP/board/search.do\">\r\n");
      out.write("		<select name=\"tag\">\r\n");
      out.write("			<option value=\"id\">작성자</option>\r\n");
      out.write("			<option value=\"title\">제목</option>\r\n");
      out.write("			<option value=\"content\">본문</option>\r\n");
      out.write("			<option value=\"write_date\">작성일</option>\r\n");
      out.write("		</select> <input type=\"text\" name=\"search\" /> <input type=\"submit\" value=\"검색\">\r\n");
      out.write("		<ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("			<li><a href=\"/bigdataERP/board/insertPage.do\" style=\"text-align: right;\">글쓰기</a></li>\r\n");
      out.write("		</ul>\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
